"""
Django settings for apps project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path
import ldap
from django_auth_ldap.config import LDAPSearch, PosixGroupType
import logging
from rest_framework.authentication import SessionAuthentication
from rest_framework.permissions import IsAuthenticated

logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Root path of container state mount
CONTAINER_STATE_ROOT = Path('/data/').resolve()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

DEBUG = False

ALLOWED_HOSTS = [
    os.environ['DJANGO_HOSTNAME'],
]


# Application definition

INSTALLED_APPS = [
    'compilations.apps.CompilationsConfig',
    'basicsso.apps.BasicssoConfig',
    'bookmarks.apps.BookmarksConfig',
    'rest_framework',
    'rest_framework.authtoken',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

LOGIN_URL = os.environ['SCRIPT_NAME'] + '/accounts/login/'

# django-bookmarks
BOOKMARKS_AUTH_CLASSES = [SessionAuthentication]
BOOKMARKS_PERM_CLASSES = [IsAuthenticated]
BOOKMARKS_AUTH_MIXIN = 'django.contrib.auth.mixins.LoginRequiredMixin'

# django-auth-ldap
AUTH_LDAP_SERVER_URI = 'ldap://edtwardy-webservices_openldap_1'
AUTHENTICATION_BACKENDS = [
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
]

AUTH_LDAP_BIND_DN = ""
AUTH_LDAP_BIND_PASSWORD = ""
AUTH_LDAP_USER_SEARCH = LDAPSearch(
    'ou=people,dc=edtwardy,dc=hopto,dc=org',
    ldap.SCOPE_SUBTREE,
    '(uid=%(user)s)'
)

AUTH_LDAP_USER_ATTR_MAP = {'first_name': 'cn', 'last_name': 'sn'}
AUTH_LDAP_FIND_GROUP_PERMS = True
AUTH_LDAP_GROUP_TYPE = PosixGroupType()
AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
    'ou=groups,dc=edtwardy,dc=hopto,dc=org',
    ldap.SCOPE_SUBTREE,
    '(objectClass=posixGroup)'
)

ROOT_URLCONF = 'apps.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'apps' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apps.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',

        # FOR THE SQLite3 Backend, NAME is the file path of the database.
        'NAME': CONTAINER_STATE_ROOT / 'database/db.sqlite3',

        # Persistent Database Connections
        'CONN_MAX_AGE': 120, # Seconds
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = CONTAINER_STATE_ROOT / 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'apps' / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CSRF and Session Cookie Security

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

# Media Files

MEDIA_URL = '/media/'
MEDIA_ROOT = CONTAINER_STATE_ROOT / 'media/'

# Compilations
COMPILATIONS_FILTERS_LOCATION = CONTAINER_STATE_ROOT \
    / 'secrets/compilations/filters.py'

# Logging (Uncomment for debugging)

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'level': 'INFO',
#             'filters': None,
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'root': {
#             'handlers': ['console'],
#             'level': 'INFO',
#     },
#     'loggers': {
#         'django_auth_ldap': {
#             'level': 'DEBUG',
#             'handlers': ['console'],
#         },
#     },
# }
