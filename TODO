* README.md: Grab the size on disk (according to dpkg and Docker)
* README.md: Grab memory requirements from systemd
* postrm script to remove Docker volumes
* Devise a way to enable/disable whole locations/services at runtime?
* Explore rootless Docker (Re-map user id of files within containers)
    https://docs.docker.com/engine/security/userns-remap/
* Set up non-root user with systemd
* docker-compose.yml: persist container logs to volume
    certbot:/var/log/letsencrypt.log
    nginx:/var/log/nginx/{access,error}.log
* Verify all containers have the same timezone.
* Cron to get regular backups of the images
* Cron to archive all backup images regularly and keep a few around
* Document format/behavior of volumes.dvm.lock in README.md
* Integrate tar --diff option
    This option compares the contents of the volume to the contents on disk.
    Useful to prevent unnecessarily changing the contents of disk.
* This repository doesn't really support testing "in-repository." It should.
* Implement MAC using Nginx to remove auth/auth, identity mgmt. from apps.
* We should be building the Debian package in Docker or a fakeroot to ensure
  all dependencies are captured in the debian/control file. For example, we
  probably rely on a Python package or two from PyPI, which can't be installed
  via apt/dpkg.
* This repository should provide an apt list once mini-dinstall is added.
* We should be careful to remove apt/dpkg/apk from OCI images, or whatever
  programs are unnecessary.
* Currently, if any of the images assembled during the build process are
  removed, but the build.lock file remains on the filesystem, the build system
  will not attempt to rebuild the images.
* We should create a git-hook that ensures images assembled during the build
  are pushed up to docker hub and tagged appropriately.
* Look into ways to make the Python applications faster. See the following
  link: https://packaging.python.org/overview/
* Some variables, like the port in the edtwardy/apps image, are speciied as
  magic numbers in too many places.
* Create non-root user for uWSGI application
* Connect Nginx and uWSGI using a Unix socket.
* When the docker-volume-manager becomes feature-stable and meets all of my
  use cases, rewrite in Rust, define requirements, write tests, documentation
  and publish under an open source license.
* Better tracking of runtime dependencies for Rust applications?
* Port edtwardy-webservices.bash to use getopt
* Create bash completion for edtwardy-webservices.bash
* Comprehensive review of container security--e.g., if an attacker gains access
  to one of my containers, what's to stop them from running a new container
  mapping /dev/mapper/edtwardy-vg--root and nukeing my filesystem? (This, of
  course, assumes that Docker-in-Docker works the way I think it does...)
* volumemanager container sometimes stays behind after stopping services?
* Add --auto-tag <description> parameter to edtwardy-webservices which appends
  salt to <description> and uses it as the tag for the backup operation. See
  docs/ContainerVolumeManager.md to see how I did it.
* django-bookmarks should either expose the auth redirect url in settings, or
  not perform a redirect, and just return an HTTP error.
* Backing up an image without a tag doesn't work.
* Create a route that redirects the website root '/' to an actual URL
* Consider disabling referrals in django-auth-ldap?
* Add StartTLS support to django-auth-ldap and openldap server
* Create bind to further secure openldap server (retrieve passwd from env)
