#!/usr/local/bin/bash
###############################################################################
# NAME:             docker-volume-manager
#
# AUTHOR:           Ethan D. Twardy <edtwardy@mtu.edu>
#
# DESCRIPTION:      Manages Docker volumes. This script expects the following
#                   interface:
#
#                     1. It is installed in an image with a bash interpreter at
#                        /usr/local/bin/bash
#                     2. The working directory is '/'
#                     3. State of the volumes is mounted at /state
#                     4. Directory containing data volumes is mounted at
#                        /datavolumes
#                     5. Directory containing config volumes is mounted at
#                        /configvolumes
#                     6. All volumes which are to be controlled are mounted.
#                        Otherwise, their contents will only be controlled to a
#                        transient volume (not persisting beyond the container)
#                     7. data-volumes.manifest exists in /state and it contains
#                        a list of paths to archive into /datavolumes.
#
# CREATED:          05/22/2021
#
# LAST EDITED:      05/26/2021
###

read -r -d '' USAGE <<EOF
Usage: $0 [sync | push]
With no arguments given, the scripe pushes and synchronizes.

Commands:
  sync      Synchronize the volume state with the archives available.
  push      Push data volumes to the archive location.
EOF

set -e
shopt -s nullglob

stateDir=/state
configVolumesDir=/configvolumes
dataVolumesDir=/datavolumes

LOG_TAG='docker-volume-manager'

lock=$stateDir/docker-volume-manager.lock
sync() {
    archives=(/$configVolumesDir/*.tar.gz)
    if [[ -f $lock ]]; then
        printf ${LOG_TAG}': %s\n' "Using existing lock file"
        archives=($(sha256sum -c $lock 2>&1 | awk -F: '/FAILED/{print $1}'))
    fi
    printf ${LOG_TAG}': %s\n' "Synchronizing config volumes: ${archives[@]}"
    for archive in "${archives[@]}"; do
        printf ${LOG_TAG}': %s\n' "Archive $archive"
        tar xzvf $archive
    done

    if [[ "${#archives[@]}" -ne 0 ]]; then
        printf ${LOG_TAG}': %s\n' "Updating lock file"
        sha256sum /$configVolumesDir/*.tar.gz > $lock
    fi
}

dataVolumesFile=$stateDir/data-volumes.manifest
push() {
    if [[ -f $dataVolumesFile ]]; then
        printf ${LOG_TAG}': %s\n' "Synchronizing data volumes"
        for location in $(cat $dataVolumesFile); do
            printf ${LOG_TAG}': %s\n' "Archive $location"
            tar czvf /$dataVolumesDir/$location-volume.tar.gz $location
        done
    else
        printf ${LOG_TAG}': %s\n' "No data-volumes.manifest found. Skipping."
    fi
}

case $1 in
    sync)
        sync
        ;;
    push)
        push
        ;;
    *)
        sync
        push
        ;;
esac

printf ${LOG_TAG}': %s\n' "Finished."

###############################################################################
